{%- set cfg = {
      'data_dir': salt['pillar.get'](company+':'+system+':software:mysql:data_dir','/var/lib/mysql')
    , 'log_dir' : salt['pillar.get'](company+':'+system+':software:mysql:log_dir','/var/log/mysql')
    , 'service_ip' : salt['pillar.get'](company+':'+system+':software:mysql:service_ip',None)
    , 'bind_ip' : None
}
%}
{%- set m = salt['pillar.get'](company+':'+system, {}) %}
{# 서버 아이피 #}
{%- if cfg.service_ip %}
{%- for psvr, info in m.get("physical server", {}).items() %}
{%- if salt['grains.get']('host') == info.hostname %}
{% do cfg.update({'bind_ip': info.get(cfg.service_ip,None) }) %}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- set svr_id = { 'curr':2, 'tmp': 0 } %}
{#  unique server id 만들기 #}
{%- set m = salt['pillar.get'](company+':'+system, {}) %}
{%- set svr_id = { 'id':0, 'tmp':2 } %}
{%- for psvr, info in m.get("physical server", {}).items() %}
{%- if salt['grains.get']('host') == info.hostname %}
{% do svr_id.update({'id': svr_id.tmp }) %}
{% else %}
{% do svr_id.update({'tmp': svr_id.tmp + 1}) %}
{%- endif %}
{%- endfor %}
#
# The MySQL database server configuration file.
#
# You can copy this to one of:
# - "/etc/mysql/my.cnf" to set global options,
# - "~/.my.cnf" to set user-specific options.
# 
# One can use all long options that the program supports.
# Run program with --help to get a list of available options and with
# --print-defaults to see which it would actually understand and use.
#
# For explanations see
# http://dev.mysql.com/doc/mysql/en/server-system-variables.html

# This will be passed to all mysql clients
# It has been reported that passwords should be enclosed with ticks/quotes
# escpecially if they contain "#" chars...
# Remember to edit /etc/mysql/debian.cnf when changing the socket location.

# Here is entries for some specific programs
# The following values assume you have at least 32M ram

[mysqld_safe]
socket		= /var/run/mysqld/mysqld.sock
nice		= 0

[mysqld]
#
# * Basic Settings
#
user		= mysql
pid-file	= /var/run/mysqld/mysqld.pid
socket		= /var/run/mysqld/mysqld.sock
port		= {{ service_port }}
basedir		= /usr
datadir		= {{ cfg.data_dir }}
tmpdir		= /tmp
lc-messages-dir	= /usr/share/mysql
skip-external-locking
#
# Instead of skip-networking the default is now to listen only on
# localhost which is more compatible and is not less secure.
{%- if cfg.bind_ip %}
bind-address		= {{ cfg.bind_ip }}
{%- endif %}
lower_case_table_names = 1
collation-server = utf8_unicode_ci
character-set-server = utf8
skip-charater-set-client-handshake

#
# * Fine Tuning
#
key_buffer_size		= 16M
max_allowed_packet	= 16M
thread_stack		= 192K
thread_cache_size       = 8
# This replaces the startup script and checks MyISAM tables if needed
# the first time they are touched
myisam-recover-options  = BACKUP
#max_connections        = 100
#table_cache            = 64
#thread_concurrency     = 10
#
# * Query Cache Configuration
#
query_cache_limit	= 1M
query_cache_size        = 16M
#
# * Logging and Replication
#
# Both location gets rotated by the cronjob.
# Be aware that this log type is a performance killer.
# As of 5.1 you can enable the log at runtime!
#general_log_file        = {{ cfg.log_dir }}/mysql.log
#general_log             = 1
#
# Error log - should be very few entries.
#
log_error = {{ cfg.log_dir }}/error.log
#
# Here you can see queries with especially long duration
#log_slow_queries	= {{ cfg.log_dir }}/mysql-slow.log
#long_query_time = 2
#log-queries-not-using-indexes
#
# The following can be used as easy to replay backup logs or for replication.
# note: if you are setting up a replication slave, see README.Debian about
#       other settings you may need to change.
server-id		= {{ svr_id.id }}
log_bin			= {{ cfg.log_dir }}/mysql-bin.log
expire_logs_days	= 10
max_binlog_size   = 100M
#binlog_do_db		= include_database_name
#binlog_ignore_db	= include_database_name
#
# * InnoDB
#
# InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.
# Read the manual for more InnoDB related options. There are many!
#
# * Security Features
#
# Read the manual, too, if you want chroot!
# chroot = /var/lib/mysql/
#
# For generating SSL certificates I recommend the OpenSSL GUI "tinyca".
#
# ssl-ca=/etc/mysql/cacert.pem
# ssl-cert=/etc/mysql/server-cert.pem
# ssl-key=/etc/mysql/server-key.pem
